<?php
/**
 * Created by PhpStorm.
 * User: tanya
 * Date: 31.10.18
 * Time: 10:49
 */

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "person".
 *
 * @property integer        $id
 * @property string         $first_name
 * @property string         $birthday
 * @property string         $middle_name
 * @property string         $last_name
 * @property integer        $job_id
 * @property integer        $age
 * @property string         $job_string
 * @property Education[]    $educationItems
 */
class Person extends ActiveRecord
{
    const ERROR_FACILITY = 'facility';
    const ERROR_PROFESSION = 'profession';
    public $education;

    public static function tableName()
    {
        return '{{%person}}';
    }

    public function rules()
    {
        return [
            [['first_name', 'middle_name', 'last_name', 'birthday'],
                'required',
                'message' => '{attribute} обязательно для заполнения'],
            [['first_name', 'middle_name', 'last_name', 'birthday', ], 'string'],
            ['birthday', 'birthdayValidate', 'skipOnEmpty' => false],
            ['education', 'educationValidate', 'skipOnEmpty' => false],
            [['job_id', 'job_string'], 'validateJob', 'skipOnEmpty' => false],
        ];
    }

    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios['create'] = [
            'first_name',
            'middle_name',
            'last_name',
            'birthday',
            'job_id',
            'job_string',
            'education'
        ];
        return $scenarios;
    }

    public function fields()
    {
        $fields = parent::fields();

        $fields['education'] = function () {
            return $this->getEducationItems()->all();
        };
        return $fields;
    }

    public function attributeLabels()
    {
        return [
            'id'           => 'ID',
            'first_name'   => 'Имя',
            'middle_name'  => 'Отчество',
            'last_name'    => 'Фамилия',
            'birthday'     => 'Дата рождения',
            'job_id'       => 'Должность (справочник)',
            'job_string'   => 'Должность',
        ];
    }

    public function beforeSave($insert)
    {
        $this->age = $this->calculateAge($this->birthday);
        $this->birthday = date('Y-m-d', strtotime($this->birthday));
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $this->fillEducation();
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function beforeDelete()
    { //это здесь потому что foreignKey у меня не отрабытывет
        foreach($this->educationItems as $item) {
            $item->delete();
        }
        return parent::beforeDelete();
    }

    public function validateJob()
    {
        if ((!$this->job_id and !$this->job_string) or
            ($this->job_id and !ArrayHelper::isIn($this->job_id, Job::getJobIds()))) {
            $this->addError('job_string', 'Должность обязательна для заполнения');
        }
        if ($this->job_id and $this->job_string and ArrayHelper::isIn($this->job_id, Job::getJobIds())) { // если заполнены оба поля
            $this->addError('job_string', 'Должность заполняется один раз');
        }
    }

    public function birthdayValidate()
    {
        $birthdayDate = self::matchToDatePattern($this->birthday);
        if ($birthdayDate) {
            if (!self::isDateExist($birthdayDate) || !self::isDateInterval($birthdayDate)) {
                $this->addError('birthday', 'Дата не валидна');
            }
        } else {
            $this->addError('birthday', 'Неверный формат даты');
        }
    }

    public static function getCustomErrors()
    {
        return [
            self::ERROR_FACILITY => 'Заполните учебное заведение',
            self::ERROR_PROFESSION => 'Заполните специальность',
        ];
    }

    public static function isDateExist($birthdayDate)
    {
        $dataToArray = explode('.', $birthdayDate);
        return checkdate($dataToArray[1], $dataToArray[0], $dataToArray[2]); // проверка реальности даты

    }

    public static function isDateInterval($birthdayDate)
    {
        return strtotime($birthdayDate) >= strtotime('01.01.1950') && strtotime($birthdayDate) <= time(); // проверка интервала

    }

    public static function matchToDatePattern($date)
    {
        $pattern = '~^([0-9]{2})\.([0-9]{2})\.([0-9]{4})$~'; // паттерн надо, потому что все мануальные функции обработки дат 
        if (preg_match($pattern, $date, $mathes)) { // пропускают косяки
            return $mathes[0];
        }
    }

    public static function getCustomErrorValue($key)
    {
        $errors = self::getCustomErrors();
        return $errors[$key];
    }

    public function educationValidate()
    {
        $errors = [];
        foreach ($this->education as $index => $education) {
            foreach ($education as $key => $value) {
                if ($value === ' ' or $value === '') { // не знаю, может ли прилететь пробел, но если нет, то смысл нижнего коммента теряется
                    $errors[$index + 1][$key] = self::getCustomErrorValue($key); // потому что не печатает он ноль, если после идет 1
                }
            }
        }
        if ($errors) {                               // добавляется в конце, тк иначе индекс двоится, хотя я не уверена, что может 
            $this->addError('education',  $errors); // прийти поле education с двумя незаполнеными подполями
        }
    }

    public function calculateAge($birthdayDate)
    {
        return date('Y') - date('Y', strtotime($birthdayDate));
    }

    public function getEducationItems()
    {
        return $this->hasMany(Education::class, ['person_id' => 'id']);
    }

    public function fillEducation()
    {
        foreach ($this->education as $i => $education) {
            $educationItem = new Education();
            foreach ($education as $key => $value) {
                $educationItem->$key = $value;
            }
            $educationItem->person_id = $this->id;
            $educationItem->save();
        }
    }
}